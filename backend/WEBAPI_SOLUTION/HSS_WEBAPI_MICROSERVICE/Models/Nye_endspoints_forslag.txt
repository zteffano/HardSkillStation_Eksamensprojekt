====== Accounts:

GET /accounts: Hent alle konti. - AccountGetDTO
GET /account/{id}: Hent en specifik konto ved ID.
POST /createaccount: Opret en ny konto. - AccountCreateDTO
PUT /account/{id}: Opdater en eksisterende konto ved ID. - AccountChangeDTO
DELETE /account/{id}: Slet en konto ved ID.


======> AccountTypes:
GET /accounttypes: Hent alle kontotyper.
GET /accounttypes/{id}: Hent en specifik kontotype ved ID.
POST /createaccounttypes: Opret en ny kontotype.
PUT /accounttype/{id}: Opdater en eksisterende kontotype ved ID.
DELETE /accounttype/{id}: Slet en kontotype ved ID.


======> Workshops:
GET /workshops: Hent alle workshops.
GET /workshop/{id}: Hent en specifik workshop ved ID.
POST /createworkshop: Opret en ny workshop.
PUT /workshop/{id}: Opdater en eksisterende workshop ved ID.
DELETE /workshop/{id}: Slet en workshop ved ID.


======> Categories:
GET /categories: Hent alle kategorier.
GET /category/{id}: Hent en specifik kategori ved ID.
POST /createcategory: Opret en ny kategori.
PUT /category/{id}: Opdater en eksisterende kategori ved ID.
DELETE /category/{id}: Slet en kategori ved ID.


======> Locations:
GET /locations: Hent alle lokationer.
GET /location/{id}: Hent en specifik lokation ved ID.
POST /createlocation: Opret en ny lokation.
PUT /location/{id}: Opdater en eksisterende lokation ved ID.
DELETE /location/{id}: Slet en lokation ved ID.


======> Companies:
GET /companies: Hent alle virksomheder.
GET /company/{id}: Hent en specifik virksomhed ved ID.
POST /createcompany: Opret en ny virksomhed.
PUT /company/{id}: Opdater en eksisterende virksomhed ved ID.
DELETE /company/{id}: Slet en virksomhed ved ID.


====== AccountWorkshops (Many-to-Many Relationships):
GET /accountworkshops: Hent alle konto-workshop relationer.
POST /createaccountworkshop: Opret en ny konto-workshop relation.
DELETE /accountworkshop: Slet en specifik konto-workshop relation. (Not sure hvordan den lige skal klares pt)





			/* Ny Models Endpoints Tests */
			// GET /accounts: Hent alle konti
			app.MapGet("/accounts", async (NewHSSContext context) => await context.Accounts.ToListAsync());

			app.MapGet("/accounts_eager", async (NewHSSContext context) => await context.Accounts
			.Include(a => a.AccountType)
			.Include(a => a.AccountWorkshops)
			.ToListAsync());

			app.MapGet("/accounts_jointest", async (NewHSSContext context) =>
			{
				var accounts = await context.Accounts
					.Include(a => a.AccountType)
					.Include(a => a.AccountWorkshops)
						.ThenInclude(aw => aw.Workshop)
					.Select(a => new
					{
						a.Id,
						a.Username,
						a.Email,
						AccountTypeName = a.AccountType.Name,
						Workshops = a.AccountWorkshops.Select(aw => aw.Workshop.Name).ToList()
					})
					.ToListAsync();

				return accounts;
			});

			// GET /account/{id}: Hent en specifik konto ved ID
			app.MapGet("/account/{id}", async (int id, NewHSSContext context) =>
				await context.Accounts.FindAsync(id) is Account account ? Results.Ok(account) : Results.NotFound());

			// GET /accounttypes: Hent alle kontotyper
			app.MapGet("/accounttypes", async (NewHSSContext context) => await context.AccountTypes.ToListAsync());

			// GET /accounttypes/{id}: Hent en specifik kontotype ved ID
			app.MapGet("/accounttypes/{id}", async (int id, NewHSSContext context) =>
				await context.AccountTypes.FindAsync(id) is AccountType accountType ? Results.Ok(accountType) : Results.NotFound());

			// GET /workshops: Hent alle workshops
			app.MapGet("/workshops", async (NewHSSContext context) => await context.Workshops.ToListAsync());

			// GET /workshop/{id}: Hent en specifik workshop ved ID
			app.MapGet("/workshop/{id}", async (int id, NewHSSContext context) =>
				await context.Workshops.FindAsync(id) is Workshop workshop ? Results.Ok(workshop) : Results.NotFound());

			// GET /categories: Hent alle kategorier
			app.MapGet("/categories", async (NewHSSContext context) => await context.Categories.ToListAsync());

			// GET /category/{id}: Hent en specifik kategori ved ID
			app.MapGet("/category/{id}", async (int id, NewHSSContext context) =>
				await context.Categories.FindAsync(id) is Category category ? Results.Ok(category) : Results.NotFound());

			// GET /locations: Hent alle lokationer
			app.MapGet("/locations", async (NewHSSContext context) => await context.Locations.ToListAsync());

			// GET /location/{id}: Hent en specifik lokation ved ID
			app.MapGet("/location/{id}", async (int id, NewHSSContext context) =>
				await context.Locations.FindAsync(id) is Location location ? Results.Ok(location) : Results.NotFound());

			// GET /companies: Hent alle virksomheder
			app.MapGet("/companies", async (NewHSSContext context) => await context.Companies.ToListAsync());

			// GET /company/{id}: Hent en specifik virksomhed ved ID
			app.MapGet("/company/{id}", async (int id, NewHSSContext context) =>
				await context.Companies.FindAsync(id) is Company company ? Results.Ok(company) : Results.NotFound());

			// GET /accountworkshops: Hent alle konto-workshop relationer
			app.MapGet("/accountworkshops", async (NewHSSContext context) => await context.AccountWorkshops.ToListAsync());




